// <auto-generated />
using System;
using CrmData.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrmData.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210827072750_hadi")]
    partial class hadi
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrmEntity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("tür")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("CrmEntity.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CrmEntity.CompanyCategory", b =>
                {
                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<int>("companyId")
                        .HasColumnType("int");

                    b.HasKey("categoryId", "companyId");

                    b.HasIndex("companyId");

                    b.ToTable("companyCategories");
                });

            modelBuilder.Entity("CrmEntity.Gorev", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Zaman")
                        .HasColumnType("datetime2");

                    b.Property<int>("calisanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("calisanId");

                    b.ToTable("gorevs");
                });

            modelBuilder.Entity("CrmEntity.Muhasebe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("alacak")
                        .HasColumnType("int");

                    b.Property<int>("companyId")
                        .HasColumnType("int");

                    b.Property<int>("verecek")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("companyId")
                        .IsUnique();

                    b.ToTable("muhasebes");
                });

            modelBuilder.Entity("CrmEntity.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("companyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("companyId");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("CrmEntity.calisan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kanun")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("companyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("iseGiris")
                        .HasColumnType("datetime2");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("companyId");

                    b.ToTable("calisans");
                });

            modelBuilder.Entity("CrmEntity.customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("companyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("companyId")
                        .IsUnique();

                    b.ToTable("customers");
                });

            modelBuilder.Entity("CrmEntity.deneme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("il")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("model")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("denemeler");
                });

            modelBuilder.Entity("CrmEntity.denemeil", b =>
                {
                    b.Property<int>("denemeId")
                        .HasColumnType("int");

                    b.Property<int>("ilId")
                        .HasColumnType("int");

                    b.HasKey("denemeId", "ilId");

                    b.HasIndex("ilId");

                    b.ToTable("denemeiller");
                });

            modelBuilder.Entity("CrmEntity.il", b =>
                {
                    b.Property<int>("ıd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("isim")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ıd");

                    b.ToTable("iller");
                });

            modelBuilder.Entity("CrmEntity.notify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("calisanId")
                        .HasColumnType("int");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("zaman")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("calisanId")
                        .IsUnique();

                    b.ToTable("notify");
                });

            modelBuilder.Entity("CrmEntity.CompanyCategory", b =>
                {
                    b.HasOne("CrmEntity.Category", "Category")
                        .WithMany("CompanyCategories")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrmEntity.Company", "Company")
                        .WithMany("CompanyCategories")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrmEntity.Gorev", b =>
                {
                    b.HasOne("CrmEntity.calisan", "calisan")
                        .WithMany("Gorev")
                        .HasForeignKey("calisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrmEntity.Muhasebe", b =>
                {
                    b.HasOne("CrmEntity.Company", "Company")
                        .WithOne("muhasebe")
                        .HasForeignKey("CrmEntity.Muhasebe", "companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrmEntity.Note", b =>
                {
                    b.HasOne("CrmEntity.Company", "company")
                        .WithMany("notes")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrmEntity.calisan", b =>
                {
                    b.HasOne("CrmEntity.Company", "company")
                        .WithMany("calisanlar")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrmEntity.customer", b =>
                {
                    b.HasOne("CrmEntity.Company", "company")
                        .WithOne("customer")
                        .HasForeignKey("CrmEntity.customer", "companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrmEntity.denemeil", b =>
                {
                    b.HasOne("CrmEntity.deneme", "denemes")
                        .WithMany()
                        .HasForeignKey("denemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrmEntity.il", "ils")
                        .WithMany()
                        .HasForeignKey("ilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrmEntity.notify", b =>
                {
                    b.HasOne("CrmEntity.calisan", "calisan")
                        .WithOne("Notify")
                        .HasForeignKey("CrmEntity.notify", "calisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
